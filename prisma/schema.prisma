generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials provider
  role          String    @default("CANDIDATE") // ADMIN, CLIENT, HR_MANAGER, CANDIDATE
  companyId     String?   // Link to company if CLIENT/HR_MANAGER
  company       Company?  @relation(fields: [companyId], references: [id])
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                      String   @id @default(cuid())
  companyName             String
  industry                String
  companySize             String
  headquarters            String
  website                 String?
  foundedYear             String?
  contactPerson           String
  contactTitle            String
  contactEmail            String   @unique
  contactPhone            String
  businessDescription     String
  targetMarkets           String  // JSON string for arrays
  currentChallenges       String  // JSON string for arrays
  hiringNeeds             String  // JSON string for arrays
  workCulture             String
  communicationStyle      String
  managementStyle         String
  remoteWorkPolicy        String
  urgentPositions         String?
  budgetRange             String
  preferredCandidateOrigin String  // JSON string for arrays
  specialRequirements     String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  // Relations
  jobPostings             JobPosting[]
  culturalAssessments     CulturalAssessment[]
  users                   User[] // Company users
}

model Candidate {
  id                  String   @id @default(cuid())
  firstName           String
  lastName            String
  email               String   @unique
  phone               String
  dateOfBirth         DateTime
  nationality         String
  currentLocation     String
  currentPosition     String
  experience          String
  education           String
  skills              String  // JSON string for arrays
  languages           String  // JSON string for arrays
  preferredLocation   String
  salaryExpectation   String
  availabilityDate    DateTime
  workType            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  culturalAssessments CulturalAssessment[]
  applications        Application[]
}

model CulturalAssessment {
  id                String   @id @default(cuid())
  assessmentType    String   // personal, team, leadership, workplace
  responses         Json     // Store all cultural question responses
  overallScore      Float
  primaryCulture    String
  secondaryCulture  String
  topStrengths      String  // JSON string for arrays
  developmentAreas  String  // JSON string for arrays
  dimensionScores   Json     // Detailed 47-dimension scores
  createdAt         DateTime @default(now())
  
  // Relations
  candidateId       String?
  candidate         Candidate? @relation(fields: [candidateId], references: [id])
  companyId         String?
  company           Company?   @relation(fields: [companyId], references: [id])
}

model JobPosting {
  id               String   @id @default(cuid())
  title            String
  description      String
  requirements     String  // JSON string for arrays
  location         String
  salaryRange      String
  workType         String
  urgency          String   // high, medium, low
  status           String   @default("active") // active, filled, cancelled
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  companyId        String
  company          Company  @relation(fields: [companyId], references: [id])
  applications     Application[]
}

model Application {
  id              String   @id @default(cuid())
  status          String   @default("pending") // pending, reviewing, accepted, rejected
  matchScore      Float?   // Cultural match percentage
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  candidateId     String
  candidate       Candidate @relation(fields: [candidateId], references: [id])
  jobPostingId    String
  jobPosting      JobPosting @relation(fields: [jobPostingId], references: [id])
  
  @@unique([candidateId, jobPostingId])
}

model MarketIntelligence {
  id              String   @id @default(cuid())
  dataType        String   // competitor_move, market_trend, regulatory_change
  title           String
  content         String
  impact          String   // high, medium, low
  region          String
  source          String
  confidence      Float    // 0-100
  createdAt       DateTime @default(now())
  tags            String  // JSON string for arrays
}

model SystemMetrics {
  id              String   @id @default(cuid())
  metricType      String   // user_activity, system_performance, api_usage
  value           Float
  metadata        Json?
  timestamp       DateTime @default(now())
  
  @@index([metricType, timestamp])
}